/*
 * Copyright (C) 2025 VEMI, All Rights Reserved.
 */
package jp.vemi.seasarbatis.jdbc;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.sql.DataSource;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Assumptions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.testcontainers.DockerClientFactory;
import org.testcontainers.containers.OracleContainer;
import org.testcontainers.utility.DockerImageName;

/**
 * Oracle Database(Testcontainers) で SQL ファイルの動作を検証する統合テストです。
 * <p>
 * sbtest_users テーブルを初期化し、MyBatis SQL ファイルが Oracle でも期待通り動作するかを確認します。
 * </p>
 *
 * @version 0.0.1
 * @author VEMI
 */
@Tag("integration")
class SBJdbcManagerSqlFileIntegrationOracleTest {

    private static OracleContainer oracleContainer;
    private static DataSource oracleDataSource;
    private static SBJdbcManager oracleManager;

    /**
     * Docker 利用可否を判定し、Oracle コンテナを初期化します。
     *
     * @throws Exception 初期化時に致命的なエラーが発生した場合
     */
    @BeforeAll
    static void setUpDatabase() throws Exception {
        Assumptions.assumeTrue(DockerClientFactory.instance().isDockerAvailable(),
                "Docker が利用できないため Oracle 統合テストをスキップします。");

        OracleContainer container = new OracleContainer(DockerImageName.parse("gvenzl/oracle-xe:21-slim"))
                .withUsername("test")
                .withPassword("test")
                .withDatabaseName("test");
        try {
            container.start();
            oracleContainer = container;
            oracleDataSource = createOracleDataSource();
            initializeOracleData(oracleDataSource);
            oracleManager = new SBJdbcManager(oracleDataSource);
        } catch (Exception ex) {
            Assumptions.assumeTrue(false,
                    "Oracle コンテナを起動できないためテストをスキップします: " + ex.getMessage());
        }
    }

    /**
     * Oracle 上で SQL ファイルを実行し、期待結果が得られることを検証します。
     */
    @Test
    void testSelectBySqlFileOnOracle() {
        Assumptions.assumeTrue(oracleManager != null, "Oracle マネージャーが初期化されていないためスキップします。");
        Map<String, Object> params = buildParameterMap();
        List<?> rows = oracleManager.selectBySqlFile("sql/complex-users-query.sql", params, Map.class).getResultList();
        assertEquals(2, rows.size());
        assertFalse(rows.isEmpty());
        assertTrue(rows.get(0) instanceof Map);
    }

    /**
     * Oracle コンテナを停止します。
     */
    @AfterAll
    static void tearDown() {
        if (oracleContainer != null) {
            oracleContainer.stop();
        }
    }

    private static DataSource createOracleDataSource() throws SQLException {
        oracle.jdbc.pool.OracleDataSource dataSource = new oracle.jdbc.pool.OracleDataSource();
        dataSource.setURL(oracleContainer.getJdbcUrl());
        dataSource.setUser(oracleContainer.getUsername());
        dataSource.setPassword(oracleContainer.getPassword());
        return dataSource;
    }

    private static void initializeOracleData(DataSource dataSource) throws SQLException {
        try (java.sql.Connection connection = dataSource.getConnection();
                java.sql.Statement statement = connection.createStatement()) {
            connection.setAutoCommit(false);
            try {
                statement.execute("DROP TABLE sbtest_users");
            } catch (SQLException ex) {
                if (!ex.getMessage().contains("ORA-00942")) {
                    throw ex;
                }
            }

            statement.execute("CREATE TABLE sbtest_users (" +
                    "id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY," +
                    "sequence_no NUMBER(10)," +
                    "amount NUMBER(10,2)," +
                    "rate BINARY_FLOAT," +
                    "score BINARY_DOUBLE," +
                    "is_active NUMBER(1)," +
                    "name VARCHAR2(100)," +
                    "description CLOB," +
                    "memo CLOB," +
                    "char_code CHAR(3)," +
                    "created_at TIMESTAMP," +
                    "updated_at TIMESTAMP," +
                    "birth_date DATE," +
                    "work_time TIMESTAMP," +
                    "status VARCHAR2(20)," +
                    "user_type VARCHAR2(50)," +
                    "preferences CLOB," +
                    "CONSTRAINT sbtest_users_pk PRIMARY KEY (id))");
            statement.execute("CREATE INDEX idx_sbtest_users_name ON sbtest_users (name)");
            statement.execute("CREATE INDEX idx_sbtest_users_status ON sbtest_users (status)");

        statement.execute("INSERT INTO sbtest_users (sequence_no, amount, rate, score, is_active, name, description, memo, char_code, created_at, updated_at, birth_date, work_time, status, user_type, preferences) "
            + "VALUES (1, 2000.00, 0.05, 85.0, 1, 'テストユーザー1', '一般ユーザー1の説明', 'メモ1', 'JP1', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, TRUNC(SYSDATE), TO_TIMESTAMP('09:00:00', 'HH24:MI:SS'), 'ACTIVE', 'USER', TO_CLOB('{\"lang\": \"ja\", \"theme\": \"dark\"}'))");
        statement.execute("INSERT INTO sbtest_users (sequence_no, amount, rate, score, is_active, name, description, memo, char_code, created_at, updated_at, birth_date, work_time, status, user_type, preferences) "
            + "VALUES (2, 1500.00, 0.03, 70.0, 0, 'テストユーザー2', '管理者ユーザーの説明', 'メモ2', 'JP2', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, TRUNC(SYSDATE), TO_TIMESTAMP('10:00:00', 'HH24:MI:SS'), 'INACTIVE', 'ADMIN,USER', TO_CLOB('{\"lang\": \"en\", \"theme\": \"light\"}'))");
        statement.execute("INSERT INTO sbtest_users (sequence_no, amount, rate, score, is_active, name, description, memo, char_code, created_at, updated_at, birth_date, work_time, status, user_type, preferences) "
            + "VALUES (3, 3000.00, 0.04, 90.0, 1, 'テストユーザー3', '複雑クエリ用のユーザー', 'メモ3', 'JP3', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, TRUNC(SYSDATE), TO_TIMESTAMP('11:00:00', 'HH24:MI:SS'), 'ACTIVE', 'VIP', TO_CLOB('{\"lang\": \"ja\", \"theme\": \"system\"}'))");

            connection.commit();
        }
    }

    private static Map<String, Object> buildParameterMap() {
        Map<String, Object> params = new HashMap<>();
        params.put("statuses", List.of("ACTIVE", "VIP"));
        params.put("keyword", "%テスト%");
        params.put("minScore", 80.0);
        params.put("includeInactive", Boolean.FALSE);
        return params;
    }
}
