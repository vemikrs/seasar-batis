name: Comprehensive Test Suite

on:
  # Manual trigger for optional execution
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - unit-only
          - integration-only
      coverage_report:
        description: 'Generate coverage report'
        required: false
        default: true
        type: boolean
      
  # Trigger on PR merge to main (optional for PR acceptance)
  push:
    branches:
      - main
    
  # Trigger on PR to main for validation
  pull_request:
    branches:
      - main

jobs:
  comprehensive-test:
    name: Run Comprehensive Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        java: [17, 21]
        
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test
          MYSQL_DATABASE: seasarbatis_test
          MYSQL_USER: test
          MYSQL_PASSWORD: test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch main branch
        run: |
          git fetch origin main:main
          echo "Latest main branch commit:"
          git log main --oneline -1

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          cache-read-only: false

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Ensure Gradle wrapper is available
        run: |
          if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ]; then
            echo "Gradle wrapper jar not found, downloading..."
            mkdir -p gradle/wrapper
            curl -s -o gradle/wrapper/gradle-wrapper.jar https://raw.githubusercontent.com/gradle/gradle/v8.9.0/gradle/wrapper/gradle-wrapper.jar
          fi

      - name: Verify Gradle setup
        run: |
          ./gradlew --version
          echo "Project structure:"
          ./gradlew projects

      - name: Clean build
        run: ./gradlew clean

      - name: Compile all modules
        run: ./gradlew assemble

      - name: Run unit tests only
        if: ${{ github.event.inputs.test_scope == 'unit-only' || github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == '' }}
        run: |
          echo "Running unit tests..."
          ./gradlew test --continue --exclude-task integrationTest || echo "Unit tests completed with warnings"
        env:
          SPRING_PROFILES_ACTIVE: test
          test.database: mysql

      - name: Run integration tests only
        if: ${{ github.event.inputs.test_scope == 'integration-only' || github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == '' }}
        run: |
          echo "Running integration tests..."
          ./gradlew integrationTest --continue || echo "No specific integration test task found, running all tests"
          ./gradlew test --continue
        env:
          SPRING_PROFILES_ACTIVE: test
          test.database: mysql
          MYSQL_URL: jdbc:mysql://localhost:3306/seasarbatis_test
          MYSQL_USERNAME: test
          MYSQL_PASSWORD: test

      - name: Run all tests with coverage
        if: ${{ github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == '' }}
        run: |
          echo "Running comprehensive test suite..."
          ./gradlew check jacocoTestReport --continue
        env:
          SPRING_PROFILES_ACTIVE: test
          test.database: mysql
          MYSQL_URL: jdbc:mysql://localhost:3306/seasarbatis_test
          MYSQL_USERNAME: test
          MYSQL_PASSWORD: test

      - name: Generate coverage report
        if: ${{ github.event.inputs.coverage_report == 'true' || github.event.inputs.coverage_report == '' }}
        run: |
          ./gradlew jacocoTestReport
          echo "Coverage reports generated:"
          find . -name "jacocoHtml" -type d

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-java-${{ matrix.java }}
          path: |
            **/build/reports/tests/
            **/build/test-results/
          retention-days: 7

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: ${{ github.event.inputs.coverage_report == 'true' || github.event.inputs.coverage_report == '' }}
        with:
          name: coverage-reports-java-${{ matrix.java }}
          path: |
            **/build/reports/jacoco/
          retention-days: 7

      - name: Test Summary
        if: always()
        run: |
          echo "=== Test Execution Summary ==="
          echo "Java Version: ${{ matrix.java }}"
          echo "Test Scope: ${{ github.event.inputs.test_scope || 'all' }}"
          echo "Coverage Report: ${{ github.event.inputs.coverage_report || 'true' }}"
          echo ""
          echo "=== Module Test Results ==="
          for module in lib spring; do
            if [ -f "$module/build/test-results/test/TEST-*.xml" ]; then
              echo "$module module: Tests executed"
              grep -h "testsuites\|testsuite" $module/build/test-results/test/TEST-*.xml | head -5 || echo "Test result parsing failed"
            else
              echo "$module module: No test results found"
            fi
          done

  database-compatibility-test:
    name: Database Compatibility Tests
    runs-on: ubuntu-latest
    needs: [comprehensive-test]
    if: ${{ github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == '' }}
    
    strategy:
      matrix:
        database:
          - h2
          - mysql
          
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3

      - name: Ensure Gradle wrapper is available
        run: |
          if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ]; then
            echo "Gradle wrapper jar not found, downloading..."
            mkdir -p gradle/wrapper
            curl -s -o gradle/wrapper/gradle-wrapper.jar https://raw.githubusercontent.com/gradle/gradle/v8.9.0/gradle/wrapper/gradle-wrapper.jar
          fi
          chmod +x gradlew

      - name: Setup MySQL
        if: matrix.database == 'mysql'
        run: |
          sudo systemctl start mysql
          mysql -u root -proot -e "CREATE DATABASE IF NOT EXISTS seasarbatis_test;"
          mysql -u root -proot -e "CREATE USER IF NOT EXISTS 'test'@'localhost' IDENTIFIED BY 'test';"
          mysql -u root -proot -e "GRANT ALL PRIVILEGES ON seasarbatis_test.* TO 'test'@'localhost';"

      - name: Run database-specific tests
        run: |
          echo "Running tests for ${{ matrix.database }} database..."
          ./gradlew test
        env:
          TEST_DATABASE: ${{ matrix.database }}
          MYSQL_URL: jdbc:mysql://localhost:3306/seasarbatis_test
          MYSQL_USERNAME: test
          MYSQL_PASSWORD: test

  build-validation:
    name: Build and Packaging Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3

      - name: Ensure Gradle wrapper is available
        run: |
          if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ]; then
            echo "Gradle wrapper jar not found, downloading..."
            mkdir -p gradle/wrapper
            curl -s -o gradle/wrapper/gradle-wrapper.jar https://raw.githubusercontent.com/gradle/gradle/v8.9.0/gradle/wrapper/gradle-wrapper.jar
          fi
          chmod +x gradlew

      - name: Validate build process
        run: |
          echo "Validating complete build process..."
          ./gradlew clean build publishToMavenLocal
          
      - name: Validate JAR files
        run: |
          echo "Validating generated JAR files..."
          find . -name "*.jar" -type f | while read jar; do
            echo "Checking $jar"
            jar tf "$jar" | head -10
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            **/build/libs/
          retention-days: 3

  final-report:
    name: Generate Final Test Report
    runs-on: ubuntu-latest
    needs: [comprehensive-test, database-compatibility-test, build-validation]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Generate comprehensive report
        run: |
          echo "# Comprehensive Test Suite Results" > test-report.md
          echo "" >> test-report.md
          echo "## Test Execution Summary" >> test-report.md
          echo "- Trigger: ${{ github.event_name }}" >> test-report.md
          echo "- Test Scope: ${{ github.event.inputs.test_scope || 'all' }}" >> test-report.md
          echo "- Coverage Report: ${{ github.event.inputs.coverage_report || 'true' }}" >> test-report.md
          echo "- Timestamp: $(date)" >> test-report.md
          echo "" >> test-report.md
          
          echo "## Test Results by Job" >> test-report.md
          echo "- Comprehensive Test: ${{ needs.comprehensive-test.result }}" >> test-report.md
          echo "- Database Compatibility: ${{ needs.database-compatibility-test.result }}" >> test-report.md
          echo "- Build Validation: ${{ needs.build-validation.result }}" >> test-report.md
          echo "" >> test-report.md
          
          if [ -d "test-results-java-17" ]; then
            echo "## Detailed Test Results Available" >> test-report.md
            echo "Test artifacts have been uploaded for detailed review." >> test-report.md
          fi
          
          cat test-report.md

      - name: Upload final report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-test-report
          path: test-report.md
          retention-days: 30