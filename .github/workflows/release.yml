name: Release to Maven Central

on:
  push:
    tags:
      - 'v*'
  pull_request:
    paths:
      - '.github/workflows/release.yml'
      - 'build.gradle'
      - 'lib/build.gradle'
      - 'spring/build.gradle'
      - 'settings.gradle'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      dry_run:
        description: 'Dry run mode (skip actual publishing)'
        required: false
        type: boolean
        default: false

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle Wrapper
      run: |
        if [ ! -f gradle/wrapper/gradle-wrapper.jar ]; then
          echo "📥 Preparing Gradle wrapper libs (without system Gradle)..."
          GRADLE_VERSION=$(grep "distributionUrl" gradle/wrapper/gradle-wrapper.properties | sed 's/.*gradle-\(.*\)-bin.zip/\1/')
          echo "Target Gradle version: $GRADLE_VERSION"
          TMP_ZIP=$(mktemp)
          curl -fsSL "https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip" -o "$TMP_ZIP"
          mkdir -p gradle/wrapper
          unzip -j -o "$TMP_ZIP" "gradle-${GRADLE_VERSION}/lib/plugins/gradle-wrapper-*.jar" -d gradle/wrapper
          rm -f "$TMP_ZIP"
          if compgen -G "gradle/wrapper/gradle-wrapper-*.jar" > /dev/null; then
            echo "✅ Gradle wrapper libraries prepared"
          else
            echo "❌ Failed to prepare gradle wrapper libraries" && exit 1
          fi
        else
          echo "✅ Gradle wrapper already exists"
        fi
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Determine execution mode
      id: set_mode
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "DRY_RUN=true" >> $GITHUB_ENV
          echo "RELEASE_VERSION=1.0.0-test" >> $GITHUB_ENV
          echo "MODE=TEST" >> $GITHUB_ENV
          echo "dry_run=true" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
          echo "DRY_RUN=true" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${{ github.event.inputs.version }}-test" >> $GITHUB_ENV
          echo "MODE=DRY_RUN" >> $GITHUB_ENV
          echo "dry_run=true" >> $GITHUB_OUTPUT
        else
          echo "DRY_RUN=false" >> $GITHUB_ENV
          echo "MODE=RELEASE" >> $GITHUB_ENV
          echo "dry_run=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Extract version from tag
      if: ${{ startsWith(github.ref, 'refs/tags/') && steps.set_mode.outputs.dry_run == 'false' }}
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "RELEASE_VERSION=$TAG_VERSION" >> $GITHUB_ENV
        
    - name: Use manual version
      if: ${{ github.event_name == 'workflow_dispatch' && steps.set_mode.outputs.dry_run == 'false' }}
      run: |
        echo "RELEASE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        
    - name: Display execution mode
      run: |
        echo "🔍 Execution Mode: $MODE"
        echo "📦 Version: $RELEASE_VERSION"
        echo "🧪 Dry Run: $DRY_RUN"
        
    - name: Update version in gradle files
      run: |
        echo "Updating version to: $RELEASE_VERSION"
        sed -i "s/version = '[^']*'/version = '$RELEASE_VERSION'/" lib/build.gradle
        sed -i "s/version = '[^']*'/version = '$RELEASE_VERSION'/" spring/build.gradle
        
    - name: Validate gradle files
      run: |
        echo "=== lib/build.gradle version ==="
        grep "version = " lib/build.gradle
        echo "=== spring/build.gradle version ==="
        grep "version = " spring/build.gradle
        
    # No explicit credentials preparation; Gradle reads secrets directly from environment
        
    - name: Build and test
      run: |
        echo "🔨 Building project..."
        ./gradlew clean build -x test
        echo "✅ Build completed successfully"
        
    - name: Validate publishing configuration
      run: |
        echo "📋 Validating publishing configuration..."
        ./gradlew tasks --all | grep -E "publish(All|ToMavenLocal|ToMavenCentral|Publication)" || true
        echo "✅ Publishing tasks available"
        
    - name: Publish to Maven Central (Central Portal)
      if: ${{ steps.set_mode.outputs.dry_run == 'false' }}
      env:
        ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.OSSRH_USERNAME }}
        ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.OSSRH_PASSWORD }}
        ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.SIGNING_SECRET_KEY }}
        ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.SIGNING_PASSWORD }}
      run: |
        echo "🚀 Publishing to Maven Central (Central Portal)..."
        ./gradlew publish --no-daemon --stacktrace
        echo "✅ Published successfully"
        
    - name: Dry run publishing validation
      if: ${{ steps.set_mode.outputs.dry_run == 'true' }}
      run: |
        echo "🧪 Dry run mode - validating publishing setup without actual publishing"
        echo "📋 Available publishing tasks:"
        ./gradlew tasks --all | grep -i publish || true
        echo ""
        echo "📦 Generated artifacts:"
        find . -name "*.jar" -type f | head -10 || true
        echo ""
        echo "⚠️  Skipping actual Maven Central publishing in test mode"
        echo "✅ Dry run validation completed"