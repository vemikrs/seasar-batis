name: Release to Maven Central

on:
  push:
    tags:
      - 'v*'
  pull_request:
    paths:
      - '.github/workflows/release.yml'
      - 'build.gradle'
      - 'lib/build.gradle'
      - 'spring/build.gradle'
      - 'settings.gradle'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      dry_run:
        description: 'Dry run mode (skip actual publishing)'
        required: false
        type: boolean
        default: false

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Determine execution mode
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "DRY_RUN=true" >> $GITHUB_ENV
          echo "RELEASE_VERSION=1.0.0-test" >> $GITHUB_ENV
          echo "MODE=TEST" >> $GITHUB_ENV
        elif [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
          echo "DRY_RUN=true" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${{ github.event.inputs.version }}-test" >> $GITHUB_ENV
          echo "MODE=DRY_RUN" >> $GITHUB_ENV
        else
          echo "DRY_RUN=false" >> $GITHUB_ENV
          echo "MODE=RELEASE" >> $GITHUB_ENV
        fi
        
    - name: Extract version from tag
      if: startsWith(github.ref, 'refs/tags/') && env.DRY_RUN == 'false'
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "RELEASE_VERSION=$TAG_VERSION" >> $GITHUB_ENV
        
    - name: Use manual version
      if: github.event_name == 'workflow_dispatch' && env.DRY_RUN == 'false'
      run: |
        echo "RELEASE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        
    - name: Display execution mode
      run: |
        echo "üîç Execution Mode: $MODE"
        echo "üì¶ Version: $RELEASE_VERSION"
        echo "üß™ Dry Run: $DRY_RUN"
        
    - name: Update version in gradle files
      run: |
        echo "Updating version to: $RELEASE_VERSION"
        sed -i "s/version = '[^']*'/version = '$RELEASE_VERSION'/" lib/build.gradle
        sed -i "s/version = '[^']*'/version = '$RELEASE_VERSION'/" spring/build.gradle
        
    - name: Validate gradle files
      run: |
        echo "=== lib/build.gradle version ==="
        grep "version = " lib/build.gradle
        echo "=== spring/build.gradle version ==="
        grep "version = " spring/build.gradle
        
    - name: Import GPG key
      if: env.DRY_RUN == 'false'
      run: |
        echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 --decode | gpg --batch --import
        
    - name: Setup GPG for testing
      if: env.DRY_RUN == 'true'
      run: |
        echo "‚ö†Ô∏è  Skipping GPG setup in test mode"
        
    - name: Build and test
      run: |
        echo "üî® Building project..."
        ./gradlew clean build -x test
        echo "‚úÖ Build completed successfully"
        
    - name: Validate publishing configuration
      run: |
        echo "üìã Validating publishing configuration..."
        ./gradlew tasks --all | grep -i publish || true
        echo "‚úÖ Publishing tasks available"
        
    - name: Publish to Maven Central
      if: env.DRY_RUN == 'false'
      env:
        OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        SIGNING_KEY_ID: ${{ secrets.SIGNING_KEY_ID }}
        SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
        SIGNING_SECRET_KEY: ${{ secrets.SIGNING_SECRET_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        echo "üöÄ Publishing to Maven Central..."
        ./gradlew publishToSonatype closeSonatypeStagingRepository
        echo "‚úÖ Published successfully"
        
    - name: Dry run publishing validation
      if: env.DRY_RUN == 'true'
      run: |
        echo "üß™ Dry run mode - validating publishing setup without actual publishing"
        echo "üìã Available publishing tasks:"
        ./gradlew tasks --all | grep -i publish || true
        echo ""
        echo "üì¶ Generated artifacts:"
        find . -name "*.jar" -type f | head -10 || true
        echo ""
        echo "‚ö†Ô∏è  Skipping actual Maven Central publishing in test mode"
        echo "‚úÖ Dry run validation completed"